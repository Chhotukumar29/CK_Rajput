- id: 1
  title: Intelligent Document Query System Project
  description: Efficiently retrieve and summarize information from PDFs using NLP techniques, enhancing response accuracy and reducing manual search efforts.
                1. Streamlined retrieval via Streamlit and AWS Bedrock, utilized FAISS for indexing, and LangChain for querying. Implemented a RAG system to combine LLMs with vector search for context-aware answers.
                2. RAG with FAISS Combined similarity search and LLM for efficient retrieval and accurate answers. Text chunks indexed and retrieved based on relevance using Bedrock embeddings. LLM (Mistral) generates context-based detailed explanations.
                3. Achieved streamlined query resolution for PDF documents with a 40% improvement in response accuracy. The RAG pipeline effectively contextualized and summarized information, ensuring high-quality outputs.

  technologies: [
                  Python,
                  LangChain,
                  AWS Bedrock,
                  FAISS,
                  Streamlit,
                  Mistral LLM
                ]
  cover: /assets/images/project_covers/fraud-fin-cover.jpg
  images: [
    '/assets/images/project_images/federated-ml/federated-ml.jpg'
  ]

- id: 2
  title: LLM Q&A Chatbot Project
  description: This project deals with detecting digits from natural scene images using  neural networks. It is implemented in the Keras framework with TensorFlow backend and OpenCV. The detector network determines whether the region proposed by the MSER algorithm is a digit or not using the CNN classifier.The CLAHE technique is used before applying MSER to the dataset. The scope of the project isEnhance user interaction and information retrieval with an advanced LangChain-powered chatbot, leveraging RAG for context-aware Q&A capabilities.       
    1. Integrated OpenAI GPT-3.5-turbo and Hugging Face with LangChain for Q&A. Added RAG to improve information retrieval by integrating vector search for context-based answers.
    2. RAG with LangChain Combined vector search for similarity-based document retrieval and advanced LLMs for Q&A. Sequential Chain applied for chaining tasks, such as getting capitals and suggesting tourist spots.
    3. Delivered high-quality, creative, and context-aware responses. RAG implementation improved answer relevance by combining contextual data retrieval and LLM capabilities, making the chatbot versatile for Q&A and generative tasks.
  
  technologies: [
                  Python,
                  LangChain,
                  OpenAI,
                  Hugging Face,
                  RAG,
                  Streamlit
                ]
  cover: /assets/images/project_covers/digit-rec-1.PNG
  images: [
    '/assets/images/project_images/deep-digit/digit-rec-1.PNG',
    '/assets/images/project_images/deep-digit/digit-rec-2.PNG',
    '/assets/images/project_images/deep-digit/digit-rec-3.PNG',
    '/assets/images/project_images/deep-digit/digit-rec-4.PNG'
  ]
  
- id: 3
  title: Semantic Search Application System
  description: Automate file retrieval for unstructured data spread across multiple directories using semantic search, reducing time spent on manual searches.
    1. Extracted file metadata, converted data into embeddings, stored embeddings in Chroma DB, and implemented semantic search using Streamlit.
    2. OpenAI embeddings with Chroma DB Converted file information to embeddings and indexed them. Performed vector similarity search for semantic file retrieval.
    3. Successfully retrieved files based on semantic similarity. The app simplified file retrieval and showcased AIâ€™s power in organizing unstructured data, improving accuracy and time efficiency.
  
  technologies: [
                  Python,
                  OpenAI,
                  Vector Database,
                  Streamlit,
                  LangChain 
                ]
  cover: /assets/images/project_covers/covid-website.jpg
  images: [
    '/assets/images/project_images/covid-simulations/1.PNG',
    '/assets/images/project_images/covid-simulations/2.PNG',
    '/assets/images/project_images/covid-simulations/3.PNG',
    '/assets/images/project_images/covid-simulations/4.PNG'
  ]
  
- id: 4
  title: Water Quality Prediction System
  description: Access to clean water is a global challenge, particularly in Rwanda. Traditional water quality prediction methods are costly and slow, lacking timely and accurate results. An automated solution is required to overcome these limitations.
    1. The system takes water parameters as inputs. The machine learning model analyzes the data to predict water quality and potability in real-time. 
    2. Random Forest Classifier was used for its robustness and high accuracy in handling complex datasets and multi-parameter predictions. 
    3. The model effectively classified water potability based on the provided parameters, ensuring reliable and actionable insights for stakeholders. 

  technologies: [
                  Python,
                  Streamlit,
                  Pandas,
                  Numpy, 
                  Matplotlib,
                  Seaborn,
                  Scikit-Learn,
                  Random Forest Classifier
                ]
  cover: /assets/images/project_covers/cloud-cover.jpg
  images: [
    '/assets/images/project_images/cloud.PNG'
  ]

- id: 5
  title: Head Count and Object Detection System
  description: Developed a real-time headcount and object detection system using Python, FastAPI, YOLO, and DeepSort, integrated with CCTV cameras via RTSP streams and deployed using Docker for scalability and efficiency.
    1. Capture RTSP CCTV feeds, detect objects using YOLO, track them with DeepSort, serve results via a FastAPI backend, and deploy the entire system in Docker containers for scalability and management.
    2. YOLO for real-time, accurate object detection; DeepSort for maintaining consistent tracking of detected objects across consecutive video frames, ensuring reliable identification and movement analysis.
    3. Achieved seamless real-time headcount detection with high accuracy and low latency, efficiently handling multiple CCTV feeds and enhancing scalability and monitoring capabilities through Docker deployment.


  technologies: [
                  Python,
                  FastAPI,
                  YOLO,
                  DeepSort,
                  Docker,
                  RTSP,
                  PyTorch,
                  TensorFlow,
                  OpenCV
                ]
  cover: /assets/images/project_covers/cloud-cover.jpg
  images: [
    '/assets/images/project_images/cloud.PNG'
  ]